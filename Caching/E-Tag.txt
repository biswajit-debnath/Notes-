Etag or "entity tag" was introduced in HTTP/1.1 specs. Etag is just a unique identifier
that the server attaches with some resource. This ETag is later on used by the client 
to make conditional HTTP requests stating "give me this resource if ETag is not same as
 the ETag that I have" and the content is downloaded only if the etags do not match.

Method by which ETag is generated is not specified in the HTTP docs and usually some 
collision-resistant hash function is used to assign etags to each version of a resource.
There could be two types of etags i.e. strong and weak

ETag: "j82j8232ha7sdh0q2882" - Strong Etag
ETag: W/"j82j8232ha7sdh0q2882" - Weak Etag (prefixed with `W/`)
A strong validating ETag means that two resources are exactly same and there is no 
difference between them at all. While a weak ETag means that two resources are although 
not strictly same but could be considered same. Weak etags might be useful for dynamic 
content, for example.

Now you know what etags are but how does the browser make this request? by making a 
request to server while sending the available Etag in If-None-Match header.

Consider the scenario, you opened a web page which loaded a logo image with caching 
period of 60 seconds and ETag of abc123xyz. After about 30 minutes you reload the page,
 browser will notice that the logo which was fresh for 60 seconds is now stale; it will
 trigger a request to server, sending the ETag of the stale logo image in if-none-match
 header

If-None-Match: "abc123xyz"
Server will then compare this ETag with the ETag of the current version of resource. 
If both etags are matched, server will send back the response of 304 Not Modified which
 will tell the client that the copy that it has is still good and it will be considered
 fresh for another 60 seconds. If both the etags do not match i.e. the logo has likely 
changed and client will be sent the new logo which it will use to replace the stale logo
 that it has.